from flask import (Flask, render_template, make_response, url_for, request, 
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
import bcrypt
app = Flask(__name__)

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite

import cs304dbi as dbi
# import cs304dbi_sqlite3 as dbi
import construct as c
import secrets
dbi.conf('construct_db')

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = secrets.token_hex()

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True


@app.route('/') #home
def home():
    return render_template('main.html',
                           page_title='Main Page')



@app.route('/browse/', defaults={'uid': None}, methods=["GET", "POST"])
@app.route('/browse/<uid>', methods = ["GET", "POST"]) #home
def browse(uid):
    query = request.args.get('query')
    industry = request.args.get('conf-industry')
    print(query)
    print(industry)
    #session['email'] = user['email']
  
    if 'uid' in session:
        uid = session['uid']
       
        conn = dbi.connect()
        events = c.select_conf(conn,query, industry)
        sessvalue = request.cookies.get('session')
        print (sessvalue)
        length = len(events)
        
        return render_template('browse_lookup.html', page_title= "Browsing Page" , uid = uid , e=events, query=query, industry= industry, length=length)
    else:
        flash('You are not loged in. Please login or create account')
        return redirect(url_for('home'))

@app.route('/login/', methods = ['GET','POST']) #home
def login():
    if request.method == 'GET':
        return render_template('login.html', page_title = 'Login Page')
    
    if request.method == 'POST':
        conn= dbi.connect()
        
        email = request.form.get('email')
        password = request.form.get('password')
        user = c.user_exist(conn,email) 
        if user is None:
            flash('user does not exist, please re-enter email')
            render_template('login.html',
                                page_title='Login Page')
        else:
            stored = user['hashedpswd']
            hashed2 = bcrypt.hashpw(password.encode('utf-8'),
                                        stored.encode('utf-8'))
            hashed2_str = hashed2.decode('utf-8')
            if hashed2_str == stored:
                print('loggin info match!')
                flash('successfully logged in as ' + email )

                session['email'] = user['email']
                session['uid'] = user['uid']
                session['logged_in'] = True

                return redirect( url_for('browse', uid=session['uid']) )
            else:
                flash('login incorrect. Try again or join')
                return redirect( url_for('home'))
            
@app.route('/logout/', methods = ['GET','POST']) #home
def logout():
    if 'uid' in session:
        
        session.pop('uid')
        session.pop('email')
        session.pop('logged_in')
        flash('You are logged out')
        return redirect(url_for('home'))
    else:
        flash('you are not logged in. Please login or create account')
        return redirect( url_for('home') )

@app.route('/create_account/', methods=['GET','POST']) #need to add hashed to password section
def create_account():
    
    if request.method == 'GET':
        return render_template('create_account.html',  
                                  
                           page_title='Create Account Page')

    elif request.method == 'POST':
        conn = dbi.connect()
        curs = dbi.dict_cursor(conn)
        name = request.form.get('name')
        phnum = request.form.get('phnum')
        email = request.form.get('email')
        password = request.form.get('password1')
        password2 = request.form.get('password2')

        user_exist = '''select uid from users where email like %s ''' # if email is already used, flash
        curs.execute(user_exist,[email])
        exist = curs.fetchone()
        if exist: 
            flash('user already exist, change email')
            return render_template('create_account.html',page_title='Create Account Page')
        if password!= password2:
            flash('passwords do not match, please check ')
            return redirect( url_for('create_account'))
        cname = request.form.get('company')
        if not name or not phnum or not email or not password or not password2:
            flash("All fields are required to create a new account")
            return render_template('create_account.html',page_title='Create Account Page')
        new_uid = c.insert_user(conn, name, phnum, email, password, cname) #when we have the login page, will redirect to loggedin browsing page
        flash('New account created successfully')
        sql = 'select uid, name, phnum, email, cid from users where email like %s'
        curs.execute(sql,[email])
        user = curs.fetchone()
        session['email'] = user['email']
        session['uid'] = user['uid']
    
        session['logged_in'] = True
        session['visits'] = 1

        return redirect(url_for('account_detail',uid = new_uid)) #redirect to user detail page

@app.route('/account_detail/<uid>', defaults={'uid': None}, methods=["GET", "POST"])
@app.route('/account_detail/<uid>', methods=['GET','POST']) #user detail (account detail) page
def account_detail(uid):
    if 'uid' in session:
        uid = session['uid']
        conn = dbi.connect()
        user = c.get_user(conn,uid)
        if not user:
            flash("User not found. Redirecting to create account page.")
            return redirect(url_for('create_account'))
        return render_template('account_detail.html',title ='Account Detail Page', **user)
    else:
        flash('user not logged in, login or create account')
        return redirect(url_for('home'))

@app.route('/create_conf/<uid>', defaults={'uid': None}, methods=["GET", "POST"])
@app.route('/create_conf/<uid>', methods=['GET', 'POST'])
def create_conf(uid):
    
    if 'uid' in session:
        
        uid = session['uid']
        email = session['email']
        if request.method == 'GET':
            return render_template('create_conf.html', uid = uid, email = email)
        if request.method == 'POST':
            title = request.form.get('conf-title')
            descript = request.form.get('conf-description')
            industry = request.form.get('conf-industry')
            location = request.form.get('conf-location')
            start_date = request.form.get('conf-start')
            end_date = request.form.get('conf-end')
            host = uid
            if not title or not descript or industry  == 'none' or not location or not start_date or not end_date :
                flash("All fields are required to create a new conference")
                return render_template('create_conf.html')
            conn = dbi.connect()
            new_eid = c.insert_conf(conn, title, descript,industry,location,start_date,end_date,host)
            flash("Conference created successfully!")
            return redirect(url_for('conf_detail', eid=new_eid)) # go to conf detail page
        
    else:
        flash('You are not logged in. Please login or create account before creating conference')
        return redirect(url_for('home'))
   
    

    

@app.route('/conf_detail/<eid>', methods=['GET', 'POST'])
def conf_detail(eid):
    conn = dbi.connect()
    conference = c.get_conf(conn,eid)
    if not conference:
        flash("Conference with eid=%s not found. Redirecting to create conference page." %eid)
        return redirect(url_for('create_conf'))
    return render_template('conf_detail.html',**conference)
    



if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'construct_db' 
    print(f'will connect to {db_to_use}')
    dbi.conf(db_to_use)
    app.debug = True
    app.run('0.0.0.0',port)
import cs304dbi as dbi
import bcrypt
import datetime
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
app = Flask(__name__)


def select_conf(conn,query, industry): #select the number of 
    curs = dbi.dict_cursor(conn)
    current_date = datetime.datetime.now()
    
    if query and industry =="none":
        #Filter conferences based on the search
        query = f"%{query}%"
        sql = 'select * from events where (title like %s or descript like %s) and end_date >= %s'
        curs.execute(sql, (query, query, current_date))
        print (" use keyword")
        
    elif industry and (query == "None" or query ==""):
        sql = 'select * from events where industry like %s and end_date >= %s'
        curs.execute(sql, (industry, current_date))
        print (" use industry")
        
    elif query and industry:
        query = f"%{query}%"
        sql = 'select * from events where industry like %s and (title like %s or descript like %s) and end_date >= %s'
        curs.execute(sql, (industry, query, query, current_date))
        print ("use both")
        
    else:
        sql = 'select * from events where end_date >= %s'
        curs.execute(sql, (current_date))
        print (" show all")
    events = curs.fetchall()
    
    return events


def insert_conf(conn, title, descript, industry, location, start_date, end_date, host): #create_conf page
    curs = dbi.dict_cursor(conn)
    sql = 'insert into events(title,descript,industry,location,start_date,end_date,host) values (%s,%s,%s,%s,%s,%s,%s)'
    curs.execute(sql, [title,descript,industry,location,start_date,end_date,host])
    conn.commit()
    curs.execute('select last_insert_id() as last_id')
    new_event = curs.fetchone()
    new_eid = new_event['last_id']
    return new_eid

def get_conf(conn,eid): #get one conf from eid
    curs = dbi.dict_cursor(conn)
    sql = 'select * from events where eid = %s'
    curs.execute(sql, [eid])
    conference = curs.fetchone()
    return conference

def get_conf_all(conn, query): #get all conf from title
    curs = dbi.dict_cursor(conn)
    event = "select title, eid from events where title like %s"
    curs.execute(event, ['%' + query + '%'])
    e = curs.fetchall()
    return e

def insert_user(conn, name, phnum, email, password, cname): #create_account page, return new uid
    curs = dbi.dict_cursor(conn)
    cid = insert_or_get_cid(conn, cname)
    print(cid, type(cid))
    

    hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    stored = hashed.decode('utf-8')
    sql = 'insert into users (name, phnum , email, hashedpswd, cid) values (%s,%s,%s,%s,%s )'
    sql2 = 'select last_insert_id() as uid'
    curs.execute(sql,[name, phnum , email, stored, cid])
    conn.commit()

    curs.execute(sql2)
    row = curs.fetchone()
    uid = row['uid']

    return uid


def insert_or_get_cid(conn, cname): #insert new company if input company does not exist, select cid if it does; return new cid
    curs = dbi.dict_cursor(conn)
    select_c = 'select cid from companies where name like %s'
    curs.execute(select_c, ['%'+cname+'%'])
    exist = curs.fetchone()
    if exist:
        return exist['cid']
    else:
        insert = 'insert into companies (name) values (%s )'
        curs.execute(insert,[cname])
        conn.commit()
        curs.execute("select last_insert_id() as cid")
        row = curs.fetchone()
        cid = row['cid']
        return cid

def get_user(conn,uid):
    curs = dbi.dict_cursor(conn)
    sql = 'select u.uid, u.name, u.phnum, u.email,  c.name from users u, companies c where uid = %s and c.cid = u.cid'
    curs.execute(sql, uid)
    user = curs.fetchone()
    
    return user
    

def user_exist(conn,email): #loggin information exist
    curs = dbi.dict_cursor(conn)
    sql = "select uid, email, hashedpswd from users where email like %s"
    curs.execute(sql, email)
    user = curs.fetchone()
    return user
{% extends "base.html" %}

{% block main_content %}

<h1>{{title}}</h1>

<body>
</div>
<table>
    <tr>
        <td><label for="user-id">ID</label></td>
        <td>{{uid}}</td>  
      </tr>
    <tr>
        <td><label for="name">Name</label></td>
        <td><input id="name" name='name' value='{{name}}'></td> 
      </tr>
    <tr>
        <td><label for="phnum">phone number</label></td>
        <td><input id="phnum" name="phnum" value="{{phnum}}"></td>
      </tr>
    <tr>
        <td><label for="email">email</label></td>
        <td><input id="email" name="email" value="{{email}}"></td>  
      </tr>
    
    <tr>
        <td><label for="cname">company</label></td>
        <td><input id="cname" name='cname' value='{{cname}}'></td>
      </tr>
   
</table>



</body>
{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
            
{% block nav %}
<nav>
  <ul>
    <li><a href="{{url_for('home')}}">home</a></li>
    <li><a href="{{url_for('logout')}}">logout</a></li>
    <li><a href="{{url_for('browse', uid = 'uid')}}">browse</a></li>
    <li><a href="{{url_for('account_detail', uid = 'uid')}}">mypage</a></li>

  </ul>
</nav>
{% endblock %}

{% block main_content %}
<h1>Welcome!to ConStruct</h1>
<h2> Please choose create or login to account, or browse for events</h2>

{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
{% extends "base.html" %}



{% block main_content %}



<h1> Browse for conferences using keyword and industries search</h1>
<form method="GET" action="/browse/">
  <h2>Keyword Search Form</h2>
    <label for="keyword">Search Conferenes:</label>
    <input type="text" id="keyword" name="query" value="{{ query|default('') }}">


  <h2>Select Industries</h2>
  <label for="conf-industry">Industry:</label>
        <select id="conf-industry" name="conf-industry">
        <option value="none">Choose One</option>
            <option value="Academic">Academic</option>
            <option value="Energy">Energy</option>
            <option value="Materials">Materials</option>
            <option value="Industrials">Industrials</option>
            <option value="Consumer Discretionary/Staples'">Consumer Discretionary/Staples'</option>
            <option value="Health Care">Health Care</option>
            <option value="Financials">Financials</option>
            <option value="Information Technology">Information Technology</option>
            <option value="Real Estate">Real Estate</option>
            <option value="Communication Services">Communication Services</option>
            <option value="Utilities">Utilities</option>
            <option value="Other">Other</option>
              </select>

    <input type="submit" value="Search">
  </form>

    
  

{% if length == 0 %}
  <p> Sorry, no conferences found!</p>
{% else %}
<h3>Available Conferences:</h3>
<p> Keywords: {{query}}  |  Industry: {{industry}} </p>
<ul>
    {% for event in e%}
  <li><a href= "{{url_for('conf_detail',eid=event['eid'])}}" >{{ event['title'] }}</a></li>
{% endfor %}
</ul>
{% endif%}
{% endblock %}
{% extends "base.html" %}

{% block main_content %}

<h2>Conference Detail Page</h2>

<p>{{title}}</p>

<body>
</div>
<table>
    <tr>
        <td><label for="conf-id">ID</label></td>
        <td><input id="conf-id" name='conf-id' value='{{eid}}'></td> 
      </tr>
    <tr>
        <td><label for="conf-title">Title</label></td>
        <td><input id="conf-title" name='conf-title' value='{{title}}'></td> 
      </tr>
    <tr>
        <td><label for="conf-description">Description</label></td>
        <td><input id="conf-description" name="conf-description" value="{{descript}}"></td>
      </tr>
    <tr>
        <td><label for="conf-industry">Industry</label></td>
        <td><input id="conf-industry" name='conf-industry' value='{{industry}}'></td>
      </tr>
    <tr>
        <td><label for="conf-location">Location</label></td>
        <td><input id="conf-location" name='conf-location' value='{{location}}'></td>
      </tr>
    <tr>
        <td><label for="conf-start">Start Date</label></td>
        <td><input id="conf-start" name='conf-start' value='{{start_date}}'></td>
      </tr>
    <tr>
        <td><label for="conf-end">End Date</label></td>
        <td><input id="conf-end" name='conf-end' value='{{end_date}}'></td>
      </tr>
    <tr>
        <td><label for="conf-host">Host</label></td>
        <td><input id="conf-host" name='conf-host' value='{{host}}'></td>
      </tr>

    
    <button type="submit" class="registerbtn">Register</button>
  </form>
</table>



</body>
{% endblock %}{% extends "base.html" %}

{% block main_content %}

<h1> Create a New Account {{name}}</h1>

<p>Please fill out the following information to create a ConStruct account:</p>

<!--uid int, 
name varchar(40), 
phnum int,
email varchar(40),
password varchar(30),
cid int -->

<form method=post action="/create_account/">
  <fieldset>
  <legend>Account Information: (categories with "*" is required)</legend>
  <table>
    <!--uid will be added in the database but not part of the input-->
  <tr><td><label for="name"> *firstname and lastname:</label></td>
      <td><input id="name" type="text" name="name"></td></tr>
  <tr><td><label for="phnum"> *phone number:</label></td>
      <td><input id="phnum" type="text" name="phnum"></td></tr>
  <tr><td><label for="email" > *email:</label></td>
      <td><input id="email" type="email" name="email"></td></tr>
  <tr><td><label for="password1" > *password:</label></td>
      <td><input id="password1" type="password" name="password1"></td></tr>
  <tr><td><label for="password2" > *confirm password:</label></td>
      <td><input id="password2" type="password" name="password2"></td></tr>
  <tr><td><label for="company" > company(leave empty if no company affiliation):</label></td>
      <td><input id="company" type="text" name="company"></td></tr>
  </table>
  </fieldset>

  <p> <input type='submit' value='submit'> </p>
</form>

{% endblock %}
{% extends "base.html" %}

{% block main_content %}

<h2>Create A New Conference!</h2>

<form method=post action="">
    <fieldset>
        <legend>Conference Information:</legend>
        <table>
        <tr><td><label for="host">Host:</label></td>
            <td> uid ({{uid}})</td>
            
            <td>email ({{email}})</td></tr>
        <tr><td><label for="conf-title">Conference Title:</label></td>
            <td><input id="conf-title" type="text" name="conf-title"></td></tr>
        <tr><td><label for="conf-description" >Conference Description:</label></td>
            <td><input id="conf-description" type="text" name="conf-description"></td></tr>
        <tr><td><label for="conf-location" >Conference Location:</label></td>
            <td><input id="conf-location" type="text" name="conf-location"></td></tr>
        <tr><td><label for="conf-start" > Conference Start Date:</label></td>
            <td><input id="conf-start" type="text" name="conf-start"></td></tr>
        <tr><td><label for="conf-end" > Conference End Date:</label></td>
            <td><input id="conf-end" type="text" name="conf-end"></td></tr>
            <label for="conf-industry">Industry:</label>
            <select id="conf-industry" name="conf-industry">
            <option value="none">Choose One</option>
                <option value="Academic">Academic</option>
                <option value="Energy">Energy</option>
                <option value="Materials">Materials</option>
                <option value="Industrials">Industrials</option>
                <option value="Consumer Discretionary/Staples'">Consumer Discretionary/Staples'</option>
                <option value="Health Care">Health Care</option>
                <option value="Financials">Financials</option>
                <option value="Information Technology">Information Technology</option>
                <option value="Real Estate">Real Estate</option>
                <option value="Communication Services">Communication Services</option>
                <option value="Utilities">Utilities</option>
                <option value="Other">Other</option>
                  </select>
                
        
        </table>
        </fieldset>
        <p> <input type='submit' value='Submit'> </p>

</form>

{% endblock %}{% extends "base.html" %}

{% block main_content %}

<h1>{{page_title}}</h1>
<form method=post action="/login/">
    <fieldset>
    <legend>categories with "*" is required</legend>
    <table> 

    <tr><td><label for="email" > *email:</label></td>
        <td><input id="email" type="email" name="email"></td></tr>
    <tr><td><label for="password" > *password:</label></td>
        <td><input id="password" type="password" name="password"></td></tr>
    
    </table>
    </fieldset>
  
    <p> <input type='submit' value='submit'> </p>
  </form>
  

{% endblock %}
{% extends "base.html" %}

{% block main_content %}
<h1>Welcome to ConStruct!</h1>


<h2> Please choose create or login to account, or browse for events</h2>


<p>Click here to <a href="{{ url_for('login') }}"> login</a>.</p>

<p>Click here to <a href="{{ url_for('create_account') }}">  create an account</a>.</p>

<p>Click here to <a href="{{ url_for('create_conf') }}">  create a conference</a>.</p>

{% endblock %}/* the --color-header and others are CSS variables, which we access later. 
*/

HTML {
    --color-header: #007ea9;  /* color for H1-H6 and others. was deepskyblue but poor contrast. */
    --color-hilite: #b50000;  /* was red, but this avoids WAVE contrast errors */ 
    --color-focus: #56B929;
    --font-family: Verdana;
    font-family: var(--font-family)
}

/* For flashed messages; make them stand out using red and italics */

#messages {
    color: var(--color-hilite);
    font-style: italic;
}


h1 {
    font-size: 200%;
    color: var(--color-header);
}

h2, h3 {
    color: var(--color-header);
}
    

/* for a simple navbar. Talk to Scott if you want drop-downs. */
nav > ul {
    display: flex;
    flex-direction: row;
}

nav ul {
    list-style-type: none;
    margin: 0px;
    padding: 0px;
}

nav > ul > li {
    flex: 0 0 auto;
    width: 15em; 
}

nav button, nav a {
    display: block;
    box-sizing: border-box; /* easier to make button and A the same size */
    width: 100%;
    height: 40px;
    padding: 0px;
    padding-bottom: 5px;
    background-color: var(--color-header); /* was #3498db */
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
    /* Firefox uses font -apple-system unless I repeat the font spec here. */
    font-family: var(--font-family);
    font-weight: bold;
    font-size: 1.4rem;
}

/* Only the top-level buttons are centered; lower ones are left-aligned. */
nav > ul > li > button , nav > ul > li > a {
    text-align: center;
}

/* because of the margin trick, this can only be used for the last element */

nav li.right {
    margin-left: auto;
}

nav button:hover, button:focus, nav a:hover, nav a:focus {
    background-color: var(--color-focus);
}

